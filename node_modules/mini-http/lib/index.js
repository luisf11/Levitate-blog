var fs             = require('fs');
var path           = require('path');
var readline       = require('readline');

var rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
}).on('close', function () {
  process.exit();
});


exports.viewEngine = function (req, res) {

  res.render = function (path, obj) {
    if (Object.prototype.toString.call(obj) === "[object Object]") {
      fs.readFile(path, function (err, content) {
        if (err) throw err;

        var rendered = content.toString();

        for (var prop in obj) rendered = rendered.replace("{{"+prop+"}}", obj[prop]);

        res.writeHead(200, {"Content-Type": "text/html"});
        return res.end(rendered);
      });
    } else throw "Render {function} second params must be an Object";
  };

  res.send = function (param) {
    return res.end(param);
  }

  res.sendFile = function (path) {
    console.log("will read the file and send it");
  };

};


exports.setContentType = function (req, res) {
  var content = req.path;
  if (typeof path.extname(content) !== "undefined") {
    var ext = path.extname(content);
    switch (ext.toLowerCase()) {
      case ".css":
      res.writeHead(200, {"Content-Type": "text/css"});
      break;
      default:
      res.statusCode = 200;
    }
  }
};


// to create JSON file in user project dir
exports.init = function (config, option) {

  var configs = {}, intro = "\nYou are about to create a mini-http.json file in:\n"+process.cwd()+"\n\nTo set custom mini-http server configs for this project.\n\nPress ^C at any time to quit.\n\n port: ";

  rl.question(intro, function (port) {
    port = port.trim();
    configs.port = port && port.replace(/[a-z]/gi, '');
    if (configs.port.length === 0) configs.port = defConfigs.get().port;

    rl.question("\n slash: ", function (slash) {
      slash = slash.trim();
      if (slash.length > 4) configs.slash = "\""+slash+"\"";
      else configs.slash = false;

      rl.question("\n startingMsg: ", function (startingMsg) {
        startingMsg = startingMsg.trim();
        if (startingMsg.length < 2) configs.startingMsg = false;
        else configs.startingMsg = "\"" + configs.startingMsg + "\"";
        if (startingMsg.search("%s") === -1 && startingMsg.length > 2) configs.startingMsg += " port:%s ";

        rl.question("\n log: ", function (log) {
          configs.log = log;

          var custom = "{\n";
          custom += "\"port\": "+ configs.port + ",\n";
          custom += "\"slash\": " + configs.slash + ",\n";
          custom += "\"startingMsg\": "+ configs.startingMsg + ",\n";
          if (configs.log === "true") custom += "\"log\": "+ true + "\n";
          else custom += "\"log\": "+ false + "\n";
          custom += "}";

          fs.writeFileSync(process.cwd()+"/mini-http.json", custom);
          rl.close();
        });

      });

    });

  });

};


exports.configs = function () {
  // TODO: set the server configs here by priority command-line arg || local JSON || global JSON
};

exports.routing = function () {
  // TODO: buid mini routing engine
};
